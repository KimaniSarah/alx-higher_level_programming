#7-base_gemetry.txt

#how BaseGeometry class works

Public instance method: def area(self): that raises an Exception with the message area() is not implemented
Public instance method: def integer_validator(self, name, value): that validates value:
you can assume name is always a string
if value is not an integer: raise a TypeError exception, with the message <name> must be an integer
if value is less or equal to 0: raise a ValueError exception with the message <name> must be greater than 0

#import

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

#TEST CASES
#Case 1

>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

#Case 2

>>> bg = BaseGeometry()
>>> bg.integer_validator("name", 1)
[name] 1

#Case 3

>>> bg = BaseGeometry()
>>> bg.integer_validator("name", "value")
Traceback (most recent call last):
TypeError: <name> must be an integer

#Case 4

>>> bg = BaseGeometry()
>>> bg.integer_validator(4, 1)
Traceback (most recent call last):
TypeError: <name> must be an integer

#Case 5
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", -4)
Traceback (most recent call last):
ValueError: <name> must be greater than 0

#Case 6
>>> bg = BaseGeometry()   
>>> bg.integer_validator("name")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

#Case 7
>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
